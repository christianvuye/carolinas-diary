name: Frontend CI

on:
  push:
    branches: [ master, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [ master, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Check code formatting with Prettier
        working-directory: ./frontend
        run: npm run format:check

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint

      - name: Run TypeScript type check
        working-directory: ./frontend
        run: npm run type-check

      - name: Run type coverage check
        working-directory: ./frontend
        run: |
          npm run type-coverage
          npm run type-coverage:report

      - name: Upload type coverage report
        uses: actions/upload-artifact@v4
        with:
          name: type-coverage-report-${{ matrix.node-version }}
          path: frontend/coverage-ts/
          retention-days: 7

      - name: Run pre-commit hooks
        uses: pre-commit/action@v3.0.0
        with:
          extra_args: --all-files

      - name: Run tests
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true

      - name: Upload test coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

      - name: Build application
        working-directory: ./frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ matrix.node-version }}
          path: frontend/build/
          retention-days: 7

  lighthouse:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build application
        working-directory: ./frontend
        run: npm run build

      - name: Serve and audit
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: './frontend/.lighthouserc.json'
          temporaryPublicStorage: true
          uploadArtifacts: true
          budgetPath: './frontend/budget.json'

  security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run security audit
        working-directory: ./frontend
        run: npm audit --audit-level=moderate

      - name: Run ESLint security rules
        working-directory: ./frontend
        run: npm run lint -- --ext .ts,.tsx,.js,.jsx --format=json --output-file eslint-results.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: frontend-security-reports
          path: frontend/eslint-results.json
          retention-days: 7

      - name: Scan for hardcoded secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./frontend/
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  code-quality:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Generate comprehensive type coverage report
        working-directory: ./frontend
        run: |
          npm run type-coverage:report
          echo "## Type Coverage Report" >> $GITHUB_STEP_SUMMARY
          cat coverage-ts/lcov.info | grep -E "^(SF|LF|LH)" | awk 'BEGIN {total=0; covered=0} /^LF/ {total+=$2} /^LH/ {covered+=$2} END {if(total>0) printf "**Type Coverage: %.1f%%** (%d/%d lines)\n", (covered/total)*100, covered, total}' >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: Comment PR with reports
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            let comment = '## 📊 Frontend Code Quality Report\n\n';

            // Add type coverage info
            try {
              const typeCoverageExists = fs.existsSync('./frontend/coverage-ts/lcov.info');
              if (typeCoverageExists) {
                comment += '### ✅ Type Coverage Report Generated\n';
                comment += 'Type coverage report has been generated and uploaded as an artifact.\n\n';
              }
            } catch (error) {
              comment += '### ⚠️ Type Coverage Report Failed\n';
              comment += 'Could not generate type coverage report.\n\n';
            }

            comment += '### 🔍 Checks Performed\n';
            comment += '- ✅ TypeScript type checking\n';
            comment += '- ✅ ESLint code quality\n';
            comment += '- ✅ Prettier code formatting\n';
            comment += '- ✅ Type coverage analysis\n';
            comment += '- ✅ Pre-commit hooks validation\n\n';

            comment += '*This report was automatically generated by the CI pipeline.*';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
