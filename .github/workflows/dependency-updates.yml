name: Dependency Updates

on:
  schedule:
    - cron: '0 8 * * 1' # Run every Monday at 8 AM UTC
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  update-dependencies:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Update frontend dependencies
        working-directory: ./frontend
        run: |
          # Update minor and patch versions
          npm update

          # Check for outdated packages
          npm outdated || true

          # Check if package-lock.json changed
          if git diff --name-only | grep -q package-lock.json; then
            echo "frontend_updated=true" >> $GITHUB_ENV
          else
            echo "frontend_updated=false" >> $GITHUB_ENV
          fi

      - name: Update backend dependencies
        working-directory: ./backend
        run: |
          # Install pip-tools for dependency management
          pip install pip-tools

          # Create requirements.in if it doesn't exist
          if [ ! -f requirements.in ]; then
            cp requirements.txt requirements.in
          fi

          # Update dependencies
          pip-compile --upgrade requirements.in

          # Check if requirements.txt changed
          if git diff --name-only | grep -q requirements.txt; then
            echo "backend_updated=true" >> $GITHUB_ENV
          else
            echo "backend_updated=false" >> $GITHUB_ENV
          fi

      - name: Run tests after updates
        if: contains(env.frontend_updated, 'true') || contains(env.backend_updated, 'true')
        env:
          FRONTEND_UPDATED: ${{ env.frontend_updated }}
          BACKEND_UPDATED: ${{ env.backend_updated }}
        run: |
          # Frontend tests
          if [ "$FRONTEND_UPDATED" == "true" ]; then
            cd frontend
            npm ci
            npm test -- --watchAll=false || echo "frontend_tests_failed=true" >> $GITHUB_ENV
            cd ..
          fi

          # Backend tests
          if [ "$BACKEND_UPDATED" == "true" ]; then
            cd "$GITHUB_WORKSPACE/backend"
            pip install -r requirements.txt
            # Install test dependencies if available
            if [ -f requirements-dev.txt ]; then
              pip install -r requirements-dev.txt
            else
              pip install pytest
            fi
            # Run backend tests if test files exist
            if find . -name "test_*.py" -o -name "*_test.py" | grep -q .; then
              python -m pytest || echo "backend_tests_failed=true" >> $GITHUB_ENV
            else
              echo "No backend tests found, skipping test validation"
            fi
          fi

      - name: Create Pull Request
        if: (contains(env.frontend_updated, 'true') || contains(env.backend_updated, 'true')) && !contains(env.frontend_tests_failed, 'true') && !contains(env.backend_tests_failed, 'true')
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: 'chore: automated dependency updates'
          body: |
            ## Automated Dependency Updates

            This PR contains automated dependency updates generated by GitHub Actions.

            ### Changes
            - Frontend dependencies updated: ${{ env.frontend_updated }}
            - Backend dependencies updated: ${{ env.backend_updated }}

            ### Testing
            - ✅ Automated tests passed
            - ⚠️ Please review changes manually before merging

            ### Security
            This PR was automatically generated and dependencies were updated to their latest compatible versions within the same major version range.

            ---
            *Generated by automated dependency update workflow*
          branch: chore/dependency-updates
          delete-branch: true
          draft: false
          labels: |
            dependencies
            automated

  update-github-actions:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create renovate config if it doesn't exist
        run: |
          if [ ! -f .github/renovate.json ]; then
            cat > .github/renovate.json << 'EOF'
            {
              "$schema": "https://docs.renovatebot.com/renovate-schema.json",
              "extends": [
                "config:base",
                "security:openssf-scorecard"
              ],
              "schedule": ["before 9am on monday"],
              "timezone": "UTC",
              "prHourlyLimit": 2,
              "prConcurrentLimit": 5,
              "rangeStrategy": "bump",
              "commitMessagePrefix": "chore:",
              "packageRules": [
                {
                  "matchManagers": ["github-actions"],
                  "matchUpdateTypes": ["major"],
                  "enabled": false
                },
                {
                  "matchManagers": ["npm"],
                  "matchUpdateTypes": ["major"],
                  "dependencyDashboardApproval": true
                },
                {
                  "matchManagers": ["pip_requirements"],
                  "matchUpdateTypes": ["major"],
                  "dependencyDashboardApproval": true
                }
              ],
              "vulnerabilityAlerts": {
                "enabled": true
              },
              "osvVulnerabilityAlerts": true
            }
            EOF
          fi

      - name: Update GitHub Actions
        uses: renovatebot/github-action@v39.0.0
        with:
          configurationFile: .github/renovate.json
          token: ${{ secrets.GITHUB_TOKEN }}

  security-advisories:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Check for security advisories
        working-directory: ./frontend
        run: |
          npm audit --audit-level=high --json > security-audit.json || true

          # Check if there are high or critical vulnerabilities (with safe fallback)
          VULN_COUNT=$(cat security-audit.json | jq '(.metadata.vulnerabilities.high // 0) + (.metadata.vulnerabilities.critical // 0)' 2>/dev/null || echo "0")
          if [ "$VULN_COUNT" != "0" ] && [ "$VULN_COUNT" != "null" ]; then
            echo "security_issues_found=true" >> $GITHUB_ENV
            echo "::warning::Security vulnerabilities found in frontend dependencies (count: $VULN_COUNT)"
          fi

      - name: Setup Python for backend security check
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Check backend security advisories
        working-directory: ./backend
        run: |
          pip install safety
          pip install -r requirements.txt

          # Check for known security vulnerabilities
          safety check --json --output backend-security.json || true

          if [ -s backend-security.json ] && cat backend-security.json | jq '.[] | length' | grep -v '^0$' > /dev/null; then
            echo "backend_security_issues=true" >> $GITHUB_ENV
            echo "::warning::Security vulnerabilities found in backend dependencies"
          fi

      - name: Create security issue
        if: contains(env.security_issues_found, 'true') || contains(env.backend_security_issues, 'true')
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Security vulnerabilities detected in dependencies',
              body: `## Security Advisory Alert

              Our automated security scan has detected vulnerabilities in project dependencies.

              ### Frontend Issues
              Frontend security issues found: ${{ env.security_issues_found || 'false' }}

              ### Backend Issues
              Backend security issues found: ${{ env.backend_security_issues || 'false' }}

              ### Action Required
              Please review the security audit reports and update affected dependencies.

              ### Auto-generated
              This issue was automatically created by the dependency update workflow.
              `,
              labels: ['security', 'dependencies', 'automated']
            });

            core.info(`Created security issue: ${issue.data.number}`);
