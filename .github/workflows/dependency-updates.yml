name: Dependency Updates

on:
  schedule:
    - cron: '0 8 * * 1' # Run every Monday at 8 AM UTC
  workflow_dispatch:

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Update frontend dependencies
      working-directory: ./frontend
      run: |
        # Update minor and patch versions
        npm update
        
        # Check for outdated packages
        npm outdated || true
        
        # Check if package-lock.json changed
        git diff --name-only | grep package-lock.json && echo "frontend_updated=true" >> $GITHUB_ENV || echo "frontend_updated=false" >> $GITHUB_ENV
    
    - name: Update backend dependencies
      working-directory: ./backend
      run: |
        # Install pip-tools for dependency management
        pip install pip-tools
        
        # Create requirements.in if it doesn't exist
        if [ ! -f requirements.in ]; then
          cp requirements.txt requirements.in
        fi
        
        # Update dependencies
        pip-compile --upgrade requirements.in
        
        # Check if requirements.txt changed
        git diff --name-only | grep requirements.txt && echo "backend_updated=true" >> $GITHUB_ENV || echo "backend_updated=false" >> $GITHUB_ENV
    
    - name: Run tests after updates
      if: env.frontend_updated == 'true' || env.backend_updated == 'true'
      run: |
        # Frontend tests
        if [ "${{ env.frontend_updated }}" == "true" ]; then
          cd frontend
          npm ci
          npm test -- --watchAll=false || echo "frontend_tests_failed=true" >> $GITHUB_ENV
        fi
        
        # Backend tests (if they exist)
        if [ "${{ env.backend_updated }}" == "true" ]; then
          cd backend
          pip install -r requirements.txt
          # Add backend test command here when available
          # python -m pytest || echo "backend_tests_failed=true" >> $GITHUB_ENV
        fi
    
    - name: Create Pull Request
      if: (env.frontend_updated == 'true' || env.backend_updated == 'true') && env.frontend_tests_failed != 'true' && env.backend_tests_failed != 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: 'chore: automated dependency updates'
        body: |
          ## Automated Dependency Updates
          
          This PR contains automated dependency updates generated by GitHub Actions.
          
          ### Changes
          - Frontend dependencies updated: ${{ env.frontend_updated }}
          - Backend dependencies updated: ${{ env.backend_updated }}
          
          ### Testing
          - ✅ Automated tests passed
          - ⚠️ Please review changes manually before merging
          
          ### Security
          This PR was automatically generated and dependencies were updated to their latest compatible versions within the same major version range.
          
          ---
          *Generated by automated dependency update workflow*
        branch: chore/dependency-updates
        delete-branch: true
        draft: false
        labels: |
          dependencies
          automated

  update-github-actions:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update GitHub Actions
      uses: renovatebot/github-action@v39.0.0
      with:
        configurationFile: .github/renovate.json
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create renovate config if it doesn't exist
      run: |
        if [ ! -f .github/renovate.json ]; then
          cat > .github/renovate.json << 'EOF'
          {
            "$schema": "https://docs.renovatebot.com/renovate-schema.json",
            "extends": [
              "config:base",
              "security:openssf-scorecard"
            ],
            "schedule": ["before 9am on monday"],
            "timezone": "UTC",
            "prHourlyLimit": 2,
            "prConcurrentLimit": 5,
            "rangeStrategy": "bump",
            "commitMessagePrefix": "chore:",
            "packageRules": [
              {
                "matchManagers": ["github-actions"],
                "matchUpdateTypes": ["major"],
                "enabled": false
              },
              {
                "matchManagers": ["npm"],
                "matchUpdateTypes": ["major"],
                "dependencyDashboardApproval": true
              },
              {
                "matchManagers": ["pip_requirements"],
                "matchUpdateTypes": ["major"],
                "dependencyDashboardApproval": true
              }
            ],
            "vulnerabilityAlerts": {
              "enabled": true
            },
            "osvVulnerabilityAlerts": true
          }
          EOF
        fi

  security-advisories:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Check for security advisories
      working-directory: ./frontend
      run: |
        npm audit --audit-level=high --json > security-audit.json || true
        
        # Check if there are high or critical vulnerabilities
        if cat security-audit.json | jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' | grep -v '^0$' > /dev/null; then
          echo "security_issues_found=true" >> $GITHUB_ENV
          echo "::warning::Security vulnerabilities found in frontend dependencies"
        fi
    
    - name: Setup Python for backend security check
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Check backend security advisories
      working-directory: ./backend
      run: |
        pip install safety
        pip install -r requirements.txt
        
        # Check for known security vulnerabilities
        safety check --json --output backend-security.json || true
        
        if [ -s backend-security.json ] && cat backend-security.json | jq '.[] | length' | grep -v '^0$' > /dev/null; then
          echo "backend_security_issues=true" >> $GITHUB_ENV
          echo "::warning::Security vulnerabilities found in backend dependencies"
        fi
    
    - name: Create security issue
      if: env.security_issues_found == 'true' || env.backend_security_issues == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 Security vulnerabilities detected in dependencies',
            body: `## Security Advisory Alert
            
            Our automated security scan has detected vulnerabilities in project dependencies.
            
            ### Frontend Issues
            Frontend security issues found: ${{ env.security_issues_found || 'false' }}
            
            ### Backend Issues  
            Backend security issues found: ${{ env.backend_security_issues || 'false' }}
            
            ### Next Steps
            1. Review the security audit reports in the latest workflow run
            2. Update affected dependencies to secure versions
            3. Test the application thoroughly after updates
            4. Close this issue once vulnerabilities are resolved
            
            ### Workflow Run
            [View detailed results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ---
            *This issue was automatically created by our security monitoring workflow*`,
            labels: ['security', 'dependencies', 'high-priority']
          });
          
          console.log('Created security issue:', issue.data.number);