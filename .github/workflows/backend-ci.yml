name: Backend CI

on:
  push:
    branches: [ master, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ master, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            backend/requirements.txt
            backend/requirements-dev.txt

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Lint with flake8
        working-directory: ./backend
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

      - name: Check code formatting with black
        working-directory: ./backend
        run: black --check --diff .

      - name: Check import sorting with isort
        working-directory: ./backend
        run: isort --check-only --diff --profile=black .

      - name: Type check with mypy
        working-directory: ./backend
        run: |
          mypy . --config-file=mypy.ini
          mypy . --config-file=mypy.ini --html-report=mypy-reports --txt-report=mypy-reports
          echo "Type coverage report generated"

      - name: Upload type coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: type-coverage-reports-${{ matrix.python-version }}
          path: backend/mypy-reports/
          retention-days: 7

      - name: Run pre-commit hooks
        working-directory: ./backend
        run: |
          pre-commit install
          pre-commit run --all-files

      - name: Run tests with pytest
        id: test-results
        working-directory: ./backend
        continue-on-error: true
        run: |
          # Run pytest with detailed output and capture results
          pytest tests/ --cov=. --cov-report=xml:tests/coverage.xml --cov-report=html:tests/htmlcov --cov-report=term --tb=short -v --junitxml=tests/junit.xml > test_output.txt 2>&1
          TEST_EXIT_CODE=$?

          # Parse test results
          TOTAL_TESTS=$(grep -o "collected [0-9]* items" test_output.txt | grep -o "[0-9]*" || echo "0")
          FAILED_TESTS=$(grep -o "[0-9]* failed" test_output.txt | grep -o "^[0-9]*" || echo "0")
          PASSED_TESTS=$((TOTAL_TESTS - FAILED_TESTS))

          # Calculate percentage
          if [ "$TOTAL_TESTS" -gt 0 ]; then
            PASS_PERCENTAGE=$((PASSED_TESTS * 100 / TOTAL_TESTS))
          else
            PASS_PERCENTAGE=0
          fi

          # Extract coverage percentage
          COVERAGE=$(grep -o "TOTAL.*[0-9]*%" test_output.txt | grep -o "[0-9]*%" | tail -1 || echo "0%")

          # Health assessment
          if [ "$PASS_PERCENTAGE" -ge 95 ]; then
            HEALTH_STATUS="üü¢ Excellent"
            HEALTH_EMOJI="üéâ"
          elif [ "$PASS_PERCENTAGE" -ge 85 ]; then
            HEALTH_STATUS="üü° Good"
            HEALTH_EMOJI="üëç"
          elif [ "$PASS_PERCENTAGE" -ge 70 ]; then
            HEALTH_STATUS="üü† Needs Attention"
            HEALTH_EMOJI="‚ö†Ô∏è"
          else
            HEALTH_STATUS="üî¥ Critical"
            HEALTH_EMOJI="üö®"
          fi

          # Save results for later steps
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
          echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
          echo "pass_percentage=$PASS_PERCENTAGE" >> $GITHUB_OUTPUT
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "health_status=$HEALTH_STATUS" >> $GITHUB_OUTPUT
          echo "health_emoji=$HEALTH_EMOJI" >> $GITHUB_OUTPUT
          echo "test_exit_code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT

          # Always exit 0 so the workflow continues
          exit 0
        env:
          DATABASE_URL: sqlite:///./test.db

      - name: Extract failed test details
        id: failed-details
        working-directory: ./backend
        if: github.event_name == 'pull_request'
        continue-on-error: true
        run: |
          # Extract failed test names and reasons
          if [ -f "test_output.txt" ]; then
            # Get failed test names
            FAILED_TEST_NAMES=$(grep "FAILED tests/" test_output.txt | sed 's/FAILED tests\///g' | sed 's/::.*//g' | sort -u | head -10)

            # Create a summary of failures
            if [ -n "$FAILED_TEST_NAMES" ]; then
              echo "FAILED_TESTS_SUMMARY<<EOF" >> $GITHUB_OUTPUT
              echo "### Failed Tests:" >> $GITHUB_OUTPUT
              echo '```' >> $GITHUB_OUTPUT
              echo "$FAILED_TEST_NAMES" >> $GITHUB_OUTPUT
              echo '```' >> $GITHUB_OUTPUT

              # Get failure reasons (first few lines of each failure)
              echo "" >> $GITHUB_OUTPUT
              echo "### Failure Details:" >> $GITHUB_OUTPUT
              grep -A 3 "FAILURES\|AssertionError\|HTTPException" test_output.txt | head -20 | while read line; do
                echo "$line" >> $GITHUB_OUTPUT
              done
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "FAILED_TESTS_SUMMARY=" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Generate test report comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const totalTests = '${{ steps.test-results.outputs.total_tests }}';
            const passedTests = '${{ steps.test-results.outputs.passed_tests }}';
            const failedTests = '${{ steps.test-results.outputs.failed_tests }}';
            const passPercentage = '${{ steps.test-results.outputs.pass_percentage }}';
            const coverage = '${{ steps.test-results.outputs.coverage }}';
            const healthStatus = '${{ steps.test-results.outputs.health_status }}';
            const healthEmoji = '${{ steps.test-results.outputs.health_emoji }}';
            const failedDetails = `${{ steps.failed-details.outputs.FAILED_TESTS_SUMMARY }}`;
            const pythonVersion = '${{ matrix.python-version }}';

            const getHealthAdvice = (percentage) => {
              if (percentage >= 95) return "üéØ **Target Achieved!** Your test suite is in excellent health.";
              if (percentage >= 85) return "‚úÖ **Good Coverage!** Consider adding a few more tests to reach 95%+.";
              if (percentage >= 70) return "‚ö° **Room for Improvement.** Aim for 85%+ test success rate.";
              return "üîß **Needs Attention.** Focus on fixing failing tests - target 85%+ success rate.";
            };

            const reportBody = `
            ## ${healthEmoji} Backend Test Report (Python ${pythonVersion})

            | Metric | Value | Status |
            |--------|--------|---------|
            | **Total Tests** | ${totalTests} | - |
            | **Passed** | ${passedTests} | ‚úÖ |
            | **Failed** | ${failedTests} | ${failedTests > 0 ? '‚ùå' : '‚úÖ'} |
            | **Success Rate** | ${passPercentage}% | ${healthStatus} |
            | **Code Coverage** | ${coverage} | üìä |

            ### Health Assessment
            ${getHealthAdvice(parseInt(passPercentage))}

            ### Test Quality Guidelines
            - üéØ **Excellent**: 95%+ success rate
            - ‚úÖ **Good**: 85-94% success rate
            - ‚ö†Ô∏è **Needs Attention**: 70-84% success rate
            - üö® **Critical**: <70% success rate

            ${failedDetails ? `
            ${failedDetails}

            ### üí° Quick Fixes
            - Review failing test assertions
            - Check for environment-specific issues
            - Ensure test data setup is correct
            - Verify API endpoint responses match expectations
            ` : 'üéâ **All tests passing!** Great work!'}

            ---
            *This report was automatically generated. Tests do not block PR merge - this is for informational purposes.*
            `;

            // Check if there's already a test report comment for this Python version
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.find(comment =>
              comment.body.includes(`Backend Test Report (Python ${pythonVersion})`) && comment.user.type === 'Bot'
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: reportBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: reportBody
              });
            }

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results-${{ matrix.python-version }}
          path: |
            backend/test_output.txt
            backend/tests/coverage.xml
            backend/tests/htmlcov/
            backend/tests/junit.xml
          retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/tests/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            backend/requirements.txt
            backend/requirements-dev.txt

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run safety check
        working-directory: ./backend
        run: safety check --json --output safety-report.json || true

      - name: Run bandit security scan
        working-directory: ./backend
        run: bandit -r . -f json -o bandit-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: backend-security-reports
          path: |
            backend/safety-report.json
            backend/bandit-report.json
          retention-days: 30

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
        if: github.actor != 'dependabot[bot]'

  docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create Dockerfile for backend
        working-directory: ./backend
        run: |
          cat > .ci.Dockerfile << 'EOF'
          FROM python:3.11-slim

          WORKDIR /app

          # Install system dependencies
          RUN apt-get update && apt-get install -y \
              gcc \
              && rm -rf /var/lib/apt/lists/*

          # Copy requirements and install Python dependencies
          COPY requirements.txt .
          RUN pip install --no-cache-dir -r requirements.txt

          # Copy application code
          COPY . .

          # Create non-root user
          RUN useradd --create-home --shell /bin/bash app && \
              chown -R app:app /app
          USER app

          EXPOSE 8000

          CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
          EOF

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/.ci.Dockerfile
          push: false
          tags: carolina-diary-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -d --name test-backend \
            -p 8000:8000 \
            carolina-diary-backend:latest

          # Wait for server to start
          sleep 10

          # Test health endpoint
          curl -f http://localhost:8000/ || exit 1

          # Cleanup
          docker stop test-backend
