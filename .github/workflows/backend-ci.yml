name: Backend CI

on:
  push:
    branches: [ master, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ master, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            backend/requirements.txt
            backend/requirements-dev.txt

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Lint with flake8
        working-directory: ./backend
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Check code formatting with black
        working-directory: ./backend
        run: black --check --diff .

      - name: Check import sorting with isort
        working-directory: ./backend
        run: isort --check-only --diff --profile=black .

      - name: Type check with mypy
        working-directory: ./backend
        run: |
          mypy . --config-file=mypy.ini
          mypy . --config-file=mypy.ini --html-report=mypy-reports --txt-report=mypy-reports
          echo "Type coverage report generated"

      - name: Upload type coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: type-coverage-reports-${{ matrix.python-version }}
          path: backend/mypy-reports/
          retention-days: 7

      - name: Run pre-commit hooks
        working-directory: ./backend
        run: |
          pre-commit install
          pre-commit run --all-files

      - name: Run tests with pytest
        working-directory: ./backend
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term
        env:
          DATABASE_URL: sqlite:///./test.db

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            backend/requirements.txt
            backend/requirements-dev.txt

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run safety check
        working-directory: ./backend
        run: safety check --json --output safety-report.json || true

      - name: Run bandit security scan
        working-directory: ./backend
        run: bandit -r . -f json -o bandit-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: backend-security-reports
          path: |
            backend/safety-report.json
            backend/bandit-report.json
          retention-days: 30

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
        if: github.actor != 'dependabot[bot]'

  docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create Dockerfile for backend
        working-directory: ./backend
        run: |
          cat > .ci.Dockerfile << 'EOF'
          FROM python:3.11-slim

          WORKDIR /app

          # Install system dependencies
          RUN apt-get update && apt-get install -y \
              gcc \
              && rm -rf /var/lib/apt/lists/*

          # Copy requirements and install Python dependencies
          COPY requirements.txt .
          RUN pip install --no-cache-dir -r requirements.txt

          # Copy application code
          COPY . .

          # Create non-root user
          RUN useradd --create-home --shell /bin/bash app && \
              chown -R app:app /app
          USER app

          EXPOSE 8000

          CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
          EOF

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/.ci.Dockerfile
          push: false
          tags: carolina-diary-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -d --name test-backend \
            -p 8000:8000 \
            carolina-diary-backend:latest

          # Wait for server to start
          sleep 10

          # Test health endpoint
          curl -f http://localhost:8000/ || exit 1

          # Cleanup
          docker stop test-backend
