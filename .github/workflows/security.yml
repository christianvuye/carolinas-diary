name: Security Scanning

on:
  schedule:
    - cron: '0 6 * * 1' # Run every Monday at 6 AM UTC
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-config.yml
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      if: matrix.language == 'javascript'
    
    - name: Manual build for Python
      if: matrix.language == 'python'
      run: |
        cd backend
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-3-Clause, BSD-2-Clause, ISC

  npm-audit:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run npm audit
      working-directory: ./frontend
      run: |
        npm audit --audit-level=moderate --output=json > npm-audit.json || true
        npm audit --audit-level=moderate

    - name: Upload npm audit results
      uses: actions/upload-artifact@v4
      with:
        name: npm-audit-results
        path: frontend/npm-audit.json
        retention-days: 30
      if: always()

  python-security:
    name: Python Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit semgrep
    
    - name: Run Safety check
      working-directory: ./backend
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report
    
    - name: Run Bandit security linter
      working-directory: ./backend
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -ll
    
    - name: Upload Python security reports
      uses: actions/upload-artifact@v4
      with:
        name: python-security-reports
        path: |
          backend/safety-report.json
          backend/bandit-report.json
        retention-days: 30

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image for scanning
      run: |
        cat > backend/Dockerfile << 'EOF'
        FROM python:3.11-slim
        WORKDIR /app
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        COPY . .
        RUN useradd --create-home --shell /bin/bash app && chown -R app:app /app
        USER app
        EXPOSE 8000
        CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
        EOF
        
        docker build -t test-backend ./backend
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: 'test-backend'
        format: 'sarif'
        output: 'trivy-backend-results.sarif'
        skip-dirs: 'frontend/node_modules,backend/venv'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-backend-results.sarif'

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@v3.63.2
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: |
        npm ci
        npm install -g license-checker
    
    - name: Check frontend licenses
      working-directory: ./frontend
      run: |
        license-checker --onlyAllow 'MIT;Apache-2.0;BSD-3-Clause;BSD-2-Clause;ISC;Apache-1.1;Apache-2.0 WITH LLVM-exception;0BSD;Unlicense;CC0-1.0' --excludePrivatePackages --summary
    
    - name: Setup Python and check backend licenses
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Check Python licenses
      working-directory: ./backend
      run: |
        pip install pip-licenses
        pip install -r requirements.txt
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --allow-only='MIT License;Apache Software License;BSD License;Apache 2.0;Apache License 2.0;3-Clause BSD License;2-Clause BSD License;ISC License' || true
    
    - name: Upload license reports
      uses: actions/upload-artifact@v4
      with:
        name: license-reports
        path: |
          backend/licenses.json
        retention-days: 30